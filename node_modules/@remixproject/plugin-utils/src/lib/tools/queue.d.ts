import { PluginQueueInterface } from '../types/queue';
import type { PluginRequest } from '../types/message';
import { Profile } from '../types/profile';
import { Api } from '../types/api';
import { PluginOptions } from '@remixproject/plugin-utils';
export declare class PluginQueueItem<T extends Api = any> implements PluginQueueInterface {
    private resolve;
    private reject;
    private timer;
    private running;
    private args;
    method: Profile<T>['methods'][number];
    timedout: boolean;
    canceled: boolean;
    finished: boolean;
    request: PluginRequest;
    private options;
    constructor(resolve: (value: unknown) => void, reject: (reason: any) => void, request: PluginRequest, method: Profile<T>['methods'][number], options: PluginOptions, args: any[]);
    setCurrentRequest(request: PluginRequest): void;
    callMethod(method: string, args: any[]): void;
    letContinue(): void;
    cancel(): void;
    run(): Promise<void>;
}
