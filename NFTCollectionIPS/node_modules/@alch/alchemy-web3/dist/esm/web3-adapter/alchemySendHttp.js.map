{"version":3,"file":"alchemySendHttp.js","sourceRoot":"","sources":["../../../src/web3-adapter/alchemySendHttp.ts"],"names":[],"mappings":";AAAA,OAAO,aAAa,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AAG/B,IAAA,KAAqB,aAAa,EAAE,EAAlC,KAAK,WAAA,EAAE,OAAO,aAAoB,CAAC;AAE3C,IAAM,eAAe,GAAG,IAAI,OAAO,CAAC;IAClC,MAAM,EAAE,kBAAkB;IAC1B,cAAc,EAAE,kBAAkB;IAClC,sBAAsB,EAAE,OAAO;CAChC,CAAC,CAAC;AACH,IAAM,iBAAiB,GAAG,GAAG,CAAC;AAE9B,MAAM,UAAU,qBAAqB,CAAC,GAAW;IAAjD,iBA2BC;IA1BC,OAAO,UAAO,OAAO;;;;;;wBACF,qBAAM,KAAK,CAAC,GAAG,EAAE;wBAChC,MAAM,EAAE,MAAM;wBACd,OAAO,EAAE,eAAe;wBACxB,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;qBAC9B,CAAC,EAAA;;oBAJI,QAAQ,GAAG,SAIf;oBACM,MAAM,GAAK,QAAQ,OAAb,CAAc;oBACpB,KAAA,MAAM,CAAA;;6BACP,GAAG,CAAC,CAAJ,wBAAG;6BAEH,iBAAiB,CAAC,CAAlB,wBAAiB;6BAEjB,CAAC,CAAC,CAAF,wBAAC;;;;2BAHK,IAAI,EAAE,SAAS;oBAAY,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;wBAAzD,uBAA0B,WAAQ,GAAE,SAAqB,OAAG;wBAE5D,sBAAO,EAAE,IAAI,EAAE,WAAW,EAAE,EAAC;wBAE7B,sBAAO;wBACL,IAAI,EAAE,cAAc;wBACpB,MAAM,EAAE,CAAC;wBACT,OAAO,EAAE,oBAAoB;qBAC9B,EAAC;;;wBAGA,MAAM,QAAA;wBACN,IAAI,EAAE,cAAc;;oBACV,qBAAM,QAAQ,CAAC,IAAI,EAAE,EAAA;wBAHjC,uBAGE,UAAO,GAAE,MAAA,CAAC,SAAqB,CAAC,CAAC,KAAK,0CAAE,OAAO;6BAC/C;;;SAEP,CAAC;AACJ,CAAC","sourcesContent":["import fetchPonyfill from \"fetch-ponyfill\";\nimport { VERSION } from \"../version\";\nimport { AlchemySendJsonRpcFunction } from \"./alchemySend\";\n\nconst { fetch, Headers } = fetchPonyfill();\n\nconst ALCHEMY_HEADERS = new Headers({\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\",\n  \"Alchemy-Web3-Version\": VERSION,\n});\nconst RATE_LIMIT_STATUS = 429;\n\nexport function makeJsonRpcHttpSender(url: string): AlchemySendJsonRpcFunction {\n  return async (request) => {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: ALCHEMY_HEADERS,\n      body: JSON.stringify(request),\n    });\n    const { status } = response;\n    switch (status) {\n      case 200:\n        return { type: \"jsonrpc\", response: await response.json() };\n      case RATE_LIMIT_STATUS:\n        return { type: \"rateLimit\" };\n      case 0:\n        return {\n          type: \"networkError\",\n          status: 0,\n          message: \"Connection failed.\",\n        };\n      default:\n        return {\n          status,\n          type: \"networkError\",\n          message: (await response.json()).error?.message,\n        };\n    }\n  };\n}\n"]}