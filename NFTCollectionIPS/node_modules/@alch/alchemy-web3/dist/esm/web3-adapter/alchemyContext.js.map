{"version":3,"file":"alchemyContext.js","sourceRoot":"","sources":["../../../src/web3-adapter/alchemyContext.ts"],"names":[],"mappings":"AAAA,OAAO,eAAe,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAE,YAAY,EAAE,MAAM,WAAW,CAAC;AAEzC,OAAO,EAEL,yBAAyB,EACzB,kBAAkB,GACnB,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,EAAE,qBAAqB,EAAE,MAAM,mBAAmB,CAAC;AAC1D,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAC7D,OAAO,EAAE,uBAAuB,EAAE,MAAM,gBAAgB,CAAC;AACzD,OAAO,EAAE,wBAAwB,EAAE,MAAM,sBAAsB,CAAC;AAChE,OAAO,EAAE,qBAAqB,EAAqB,MAAM,mBAAmB,CAAC;AAC7E,OAAO,EAAE,wBAAwB,EAAE,MAAM,qBAAqB,CAAC;AAE/D,IAAM,sBAAsB,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,SAAS;AAS3D,MAAM,UAAU,kBAAkB,CAChC,GAAW,EACX,MAAkB;IAElB,IAAM,kBAAkB,GAAG,yBAAyB,EAAE,CAAC;IACvD,IAAM,UAAU,GAAG,qBAAqB,CAAC;QACvC,MAAM,QAAA;QACN,GAAG,KAAA;KACJ,CAAC,CAAC;IACH,IAAI,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QAC5B,IAAM,mBAAmB,GAAG,qBAAqB,CAAC,GAAG,CAAC,CAAC;QACjD,IAAA,KAA2C,wBAAwB,CACvE,mBAAmB,EACnB,MAAM,CACP,EAHO,kBAAkB,wBAAA,EAAE,gBAAgB,sBAG3C,CAAC;QACF,IAAM,cAAc,GAAG,kBAAkB,CACvC,kBAAkB,EAClB,kBAAkB,CACnB,CAAC;QACF,IAAM,QAAQ,GAAG,uBAAuB,CAAC,kBAAkB,CAAC,CAAC;QAC7D,OAAO,EAAE,QAAQ,UAAA,EAAE,cAAc,gBAAA,EAAE,UAAU,YAAA,EAAE,gBAAgB,kBAAA,EAAE,CAAC;KACnE;SAAM,IAAI,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QACjC,IAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,kBAAgB,OAAS,CAAC,CAAC,CAAC,SAAS,CAAC;QAC3E,IAAM,EAAE,GAAG,IAAI,eAAe,CAAC,GAAG,EAAE,QAAQ,EAAE;YAC5C,aAAa,EAAE,uBAAuB,EAAE;SACzC,CAAC,CAAC;QACH,IAAM,WAAW,GAAG,mBAAmB,CAAC,EAAE,CAAC,CAAC;QACtC,IAAA,KAA2C,wBAAwB,CACvE,WAAW,EACX,MAAM,CACP,EAHO,kBAAkB,wBAAA,EAAE,gBAAgB,sBAG3C,CAAC;QACF,IAAM,cAAc,GAAG,kBAAkB,CACvC,kBAAkB,EAClB,kBAAkB,CACnB,CAAC;QACF,IAAM,QAAQ,GAAG,IAAI,wBAAwB,CAC3C,EAAE,EACF,kBAAkB,EAClB,cAAc,CACf,CAAC;QACF,OAAO,EAAE,QAAQ,UAAA,EAAE,cAAc,gBAAA,EAAE,UAAU,YAAA,EAAE,gBAAgB,kBAAA,EAAE,CAAC;KACnE;SAAM;QACL,MAAM,IAAI,KAAK,CACb,4EAA0E,GAAK,CAChF,CAAC;KACH;AACH,CAAC;AAED,SAAS,uBAAuB;IAC9B,OAAO,iBAAiB,EAAE;QACxB,CAAC,CAAC,UAAC,GAAW,EAAE,SAAyC;YACrD,OAAA,IAAI,YAAY,CAAC,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE;gBAChE,sBAAsB,EAAE,sBAAsB;gBAC9C,oBAAoB,EAAE,sBAAsB;aAC7C,CAAC;QAHF,CAGE;QACN,CAAC,CAAC,SAAS,CAAC;AAChB,CAAC;AAED,SAAS,iBAAiB;IACxB,OAAO,CACL,OAAO,OAAO,KAAK,WAAW;QAC9B,OAAO,IAAI,IAAI;QACf,OAAO,CAAC,QAAQ,IAAI,IAAI;QACxB,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,CAC9B,CAAC;AACJ,CAAC;AAED,SAAS,YAAY,CAAC,GAAW;IAC/B,OAAO,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AAC9E,CAAC","sourcesContent":["import SturdyWebSocket from \"sturdy-websocket\";\nimport { w3cwebsocket } from \"websocket\";\nimport { FullConfig, Provider } from \"../types\";\nimport {\n  JsonRpcSenders,\n  makeJsonRpcPayloadFactory,\n  makeJsonRpcSenders,\n} from \"../util/jsonRpc\";\nimport { VERSION } from \"../version\";\nimport { makeJsonRpcHttpSender } from \"./alchemySendHttp\";\nimport { makeWebSocketSender } from \"./alchemySendWebSocket\";\nimport { makeAlchemyHttpProvider } from \"./httpProvider\";\nimport { makeJsonRpcPayloadSender } from \"./sendJsonRpcPayload\";\nimport { makeRestPayloadSender, RestPayloadSender } from \"./sendRestPayload\";\nimport { AlchemyWebSocketProvider } from \"./webSocketProvider\";\n\nconst NODE_MAX_WS_FRAME_SIZE = 100 * 1024 * 1024; // 100 MB\n\nexport interface AlchemyContext {\n  provider: any;\n  restSender: RestPayloadSender;\n  jsonRpcSenders: JsonRpcSenders;\n  setWriteProvider(provider: Provider | null | undefined): void;\n}\n\nexport function makeAlchemyContext(\n  url: string,\n  config: FullConfig,\n): AlchemyContext {\n  const makeJsonRpcPayload = makeJsonRpcPayloadFactory();\n  const restSender = makeRestPayloadSender({\n    config,\n    url,\n  });\n  if (/^https?:\\/\\//.test(url)) {\n    const alchemySendJsonrRpc = makeJsonRpcHttpSender(url);\n    const { sendJsonRpcPayload, setWriteProvider } = makeJsonRpcPayloadSender(\n      alchemySendJsonrRpc,\n      config,\n    );\n    const jsonRpcSenders = makeJsonRpcSenders(\n      sendJsonRpcPayload,\n      makeJsonRpcPayload,\n    );\n    const provider = makeAlchemyHttpProvider(sendJsonRpcPayload);\n    return { provider, jsonRpcSenders, restSender, setWriteProvider };\n  } else if (/^wss?:\\/\\//.test(url)) {\n    const protocol = isAlchemyUrl(url) ? `alchemy-web3-${VERSION}` : undefined;\n    const ws = new SturdyWebSocket(url, protocol, {\n      wsConstructor: getWebSocketConstructor(),\n    });\n    const alchemySend = makeWebSocketSender(ws);\n    const { sendJsonRpcPayload, setWriteProvider } = makeJsonRpcPayloadSender(\n      alchemySend,\n      config,\n    );\n    const jsonRpcSenders = makeJsonRpcSenders(\n      sendJsonRpcPayload,\n      makeJsonRpcPayload,\n    );\n    const provider = new AlchemyWebSocketProvider(\n      ws,\n      sendJsonRpcPayload,\n      jsonRpcSenders,\n    );\n    return { provider, jsonRpcSenders, restSender, setWriteProvider };\n  } else {\n    throw new Error(\n      `Alchemy URL protocol must be one of http, https, ws, or wss. Recieved: ${url}`,\n    );\n  }\n}\n\nfunction getWebSocketConstructor(): any {\n  return isNodeEnvironment()\n    ? (url: string, protocols?: string | string[] | undefined) =>\n        new w3cwebsocket(url, protocols, undefined, undefined, undefined, {\n          maxReceivedMessageSize: NODE_MAX_WS_FRAME_SIZE,\n          maxReceivedFrameSize: NODE_MAX_WS_FRAME_SIZE,\n        })\n    : WebSocket;\n}\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== \"undefined\" &&\n    process != null &&\n    process.versions != null &&\n    process.versions.node != null\n  );\n}\n\nfunction isAlchemyUrl(url: string): boolean {\n  return url.indexOf(\"alchemy.com\") >= 0 || url.indexOf(\"alchemyapi.io\") >= 0;\n}\n"]}