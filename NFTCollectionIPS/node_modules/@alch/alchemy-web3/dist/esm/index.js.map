{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import Web3 from \"web3\";\nimport { Log, LogsOptions, Transaction } from \"web3-core\";\nimport web3CoreSubscriptions, { Subscription } from \"web3-core-subscriptions\";\nimport { BlockHeader, Eth, Syncing } from \"web3-eth\";\nimport ABIDecoder from \"web3-eth-abi\";\nimport { toHex } from \"web3-utils\";\nimport {\n  AssetTransfersParams,\n  AssetTransfersResponse,\n  GetNftMetadataParams,\n  GetNftMetadataResponse,\n  GetNftsParams,\n  GetNftsParamsWithoutMetadata,\n  GetNftsResponse,\n  GetNftsResponseWithoutMetadata,\n  PrivateTransactionPreferences,\n  TokenAllowanceParams,\n  TokenAllowanceResponse,\n  TokenBalancesResponse,\n  TokenMetadataResponse,\n  TransactionReceiptsParams,\n  TransactionReceiptsResponse,\n} from \"./alchemy-apis/types\";\nimport {\n  AlchemyWeb3Config,\n  FullConfig,\n  PendingTransactionsOptions,\n  PendingTransactionsOptionsHashesOnly,\n  Provider,\n  TransactionsOptions,\n  Web3Callback,\n} from \"./types\";\nimport { formatBlock } from \"./util/hex\";\nimport { JsonRpcSenders } from \"./util/jsonRpc\";\nimport { callWhenDone } from \"./util/promises\";\nimport { makeAlchemyContext } from \"./web3-adapter/alchemyContext\";\nimport { patchEnableCustomRPC } from \"./web3-adapter/customRPC\";\nimport { patchEthMaxPriorityFeePerGasMethod } from \"./web3-adapter/eth_maxPriorityFeePerGas\";\nimport { patchEthPrivateTransactionMethods } from \"./web3-adapter/eth_PrivateTransactions\";\nimport { RestPayloadSender } from \"./web3-adapter/sendRestPayload\";\n\nexport * from \"./alchemy-apis/types\";\n\nconst DEFAULT_MAX_RETRIES = 3;\nconst DEFAULT_RETRY_INTERVAL = 1000;\nconst DEFAULT_RETRY_JITTER = 250;\nconst DEFAULT_CONTRACT_ADDRESS = \"DEFAULT_TOKENS\";\n\nexport interface AlchemyWeb3 extends Web3 {\n  alchemy: AlchemyMethods;\n  eth: AlchemyEth;\n  setWriteProvider(provider: Provider | null | undefined): void;\n}\n\nexport interface AlchemyMethods {\n  getTokenAllowance(\n    params: TokenAllowanceParams,\n    callback?: Web3Callback<TokenAllowanceResponse>,\n  ): Promise<TokenAllowanceResponse>;\n  getTokenBalances(\n    address: string,\n    contractAddresses?: string[],\n    callback?: Web3Callback<TokenBalancesResponse>,\n  ): Promise<TokenBalancesResponse>;\n  getTokenMetadata(\n    address: string,\n    callback?: Web3Callback<TokenMetadataResponse>,\n  ): Promise<TokenMetadataResponse>;\n  getAssetTransfers(\n    params: AssetTransfersParams,\n    callback?: Web3Callback<AssetTransfersResponse>,\n  ): Promise<AssetTransfersResponse>;\n  getNftMetadata(\n    params: GetNftMetadataParams,\n    callback?: Web3Callback<GetNftMetadataResponse>,\n  ): Promise<GetNftMetadataResponse>;\n  getNfts(\n    params: GetNftsParamsWithoutMetadata,\n    callback?: Web3Callback<GetNftsResponseWithoutMetadata>,\n  ): Promise<GetNftsResponseWithoutMetadata>;\n  getNfts(\n    params: GetNftsParams,\n    callback?: Web3Callback<GetNftsResponse>,\n  ): Promise<GetNftsResponse>;\n  getTransactionReceipts(\n    params: TransactionReceiptsParams,\n    callback?: Web3Callback<TransactionReceiptsResponse>,\n  ): Promise<TransactionReceiptsResponse>;\n}\n\n/**\n * Same as Eth, but with `subscribe` allowing more types.\n */\nexport interface AlchemyEth extends Eth {\n  subscribe(\n    type: \"logs\",\n    options?: LogsOptions,\n    callback?: (error: Error, log: Log) => void,\n  ): Subscription<Log>;\n  subscribe(\n    type: \"syncing\",\n    callback?: (error: Error, result: Syncing) => void,\n  ): Subscription<Syncing>;\n  subscribe(\n    type: \"newBlockHeaders\",\n    callback?: (error: Error, blockHeader: BlockHeader) => void,\n  ): Subscription<BlockHeader>;\n  subscribe(\n    type: \"pendingTransactions\",\n    callback?: (error: Error, transactionHash: string) => void,\n  ): Subscription<string>;\n  subscribe(\n    type: \"alchemy_fullPendingTransactions\",\n    callback?: (error: Error, transaction: Transaction) => void,\n  ): Subscription<Transaction>;\n  subscribe(\n    type: \"alchemy_filteredFullPendingTransactions\",\n    options?: TransactionsOptions,\n    callback?: (error: Error, transaction: Transaction) => void,\n  ): Subscription<Transaction>;\n  subscribe(\n    type: \"alchemy_pendingTransactions\",\n    options?: PendingTransactionsOptionsHashesOnly,\n    callback?: (error: Error, transactionHash: string) => void,\n  ): Subscription<string>;\n  subscribe(\n    type: \"alchemy_pendingTransactions\",\n    options?: PendingTransactionsOptions,\n    callback?: (error: Error, transaction: Transaction) => void,\n  ): Subscription<Transaction>;\n  subscribe(\n    type:\n      | \"pendingTransactions\"\n      | \"logs\"\n      | \"syncing\"\n      | \"newBlockHeaders\"\n      | \"alchemy_fullPendingTransactions\"\n      | \"alchemy_filteredFullPendingTransactions\"\n      | \"alchemy_pendingTransactions\",\n    options?: null | LogsOptions | TransactionsOptions,\n    callback?: (\n      error: Error,\n      item: Log | Syncing | BlockHeader | string | Transaction,\n    ) => void,\n  ): Subscription<Log | BlockHeader | Syncing | string | Transaction>;\n  getMaxPriorityFeePerGas(\n    callback?: (error: Error, fee: string) => void,\n  ): Promise<string>;\n  sendPrivateTransaction(\n    tx: string,\n    maxBlockNumber?: string,\n    preferences?: PrivateTransactionPreferences,\n    callback?: (error: Error, hash: string) => void,\n  ): Promise<string>;\n  cancelPrivateTransaction(\n    txHash: string,\n    callback?: (error: Error, result: boolean) => void,\n  ): Promise<boolean>;\n}\n\ninterface EthereumWindow extends Window {\n  ethereum?: any;\n}\n\ndeclare const window: EthereumWindow;\n\nexport function createAlchemyWeb3(\n  alchemyUrl: string,\n  config?: AlchemyWeb3Config,\n): AlchemyWeb3 {\n  const fullConfig = fillInConfigDefaults(config);\n  const { provider, jsonRpcSenders, restSender, setWriteProvider } =\n    makeAlchemyContext(alchemyUrl, fullConfig);\n  const alchemyWeb3 = new Web3(provider) as AlchemyWeb3;\n  alchemyWeb3.setProvider = () => {\n    throw new Error(\n      \"setProvider is not supported in Alchemy Web3. To change the provider used for writes, use setWriteProvider() instead.\",\n    );\n  };\n  alchemyWeb3.setWriteProvider = setWriteProvider;\n\n  // Define function separately in order to allow for overloads.\n  function getNfts(\n    params: GetNftsParamsWithoutMetadata,\n    callback?: Web3Callback<GetNftsResponseWithoutMetadata>,\n  ): Promise<GetNftsResponseWithoutMetadata>;\n  function getNfts(\n    params: GetNftsParams,\n    callback?: Web3Callback<GetNftsResponse>,\n  ): Promise<GetNftsResponse>;\n  function getNfts(\n    params: GetNftsParams | GetNftsParamsWithoutMetadata,\n    callback?:\n      | Web3Callback<GetNftsResponseWithoutMetadata>\n      | Web3Callback<GetNftsResponse>,\n  ): Promise<GetNftsResponse | GetNftsResponseWithoutMetadata> {\n    return callAlchemyRestEndpoint({\n      restSender,\n      callback,\n      params,\n      path: \"getNFTs\",\n    });\n  }\n\n  alchemyWeb3.alchemy = {\n    getTokenAllowance: (params: TokenAllowanceParams, callback) =>\n      callAlchemyJsonRpcMethod({\n        jsonRpcSenders,\n        callback,\n        method: \"alchemy_getTokenAllowance\",\n        params: [params],\n      }),\n    getTokenBalances: (address, contractAddresses, callback) =>\n      callAlchemyJsonRpcMethod({\n        jsonRpcSenders,\n        callback,\n        method: \"alchemy_getTokenBalances\",\n        params: [address, contractAddresses || DEFAULT_CONTRACT_ADDRESS],\n        processResponse: processTokenBalanceResponse,\n      }),\n    getTokenMetadata: (address, callback) =>\n      callAlchemyJsonRpcMethod({\n        jsonRpcSenders,\n        callback,\n        params: [address],\n        method: \"alchemy_getTokenMetadata\",\n      }),\n    getAssetTransfers: (params: AssetTransfersParams, callback) =>\n      callAlchemyJsonRpcMethod({\n        jsonRpcSenders,\n        callback,\n        params: [\n          {\n            ...params,\n            fromBlock:\n              params.fromBlock != null\n                ? formatBlock(params.fromBlock)\n                : undefined,\n            toBlock:\n              params.toBlock != null ? formatBlock(params.toBlock) : undefined,\n            maxCount:\n              params.maxCount != null ? toHex(params.maxCount) : undefined,\n          },\n        ],\n        method: \"alchemy_getAssetTransfers\",\n      }),\n    getNftMetadata: (params: GetNftMetadataParams, callback) =>\n      callAlchemyRestEndpoint({\n        restSender,\n        callback,\n        params,\n        path: \"getNFTMetadata\",\n      }),\n    getNfts,\n    getTransactionReceipts: (params: TransactionReceiptsParams, callback) =>\n      callAlchemyJsonRpcMethod({\n        jsonRpcSenders,\n        callback,\n        method: \"alchemy_getTransactionReceipts\",\n        params: [params],\n      }),\n  };\n  patchSubscriptions(alchemyWeb3);\n  patchEnableCustomRPC(alchemyWeb3);\n  patchEthMaxPriorityFeePerGasMethod(alchemyWeb3);\n  patchEthPrivateTransactionMethods(alchemyWeb3);\n  return alchemyWeb3;\n}\n\nfunction fillInConfigDefaults({\n  writeProvider = getWindowProvider(),\n  jsonRpcSenderMiddlewares = [],\n  maxRetries = DEFAULT_MAX_RETRIES,\n  retryInterval = DEFAULT_RETRY_INTERVAL,\n  retryJitter = DEFAULT_RETRY_JITTER,\n}: AlchemyWeb3Config = {}): FullConfig {\n  return {\n    writeProvider,\n    jsonRpcSenderMiddlewares,\n    maxRetries,\n    retryInterval,\n    retryJitter,\n  };\n}\n\nfunction getWindowProvider(): Provider | null {\n  return typeof window !== \"undefined\" ? window.ethereum : null;\n}\n\ninterface CallAlchemyJsonRpcMethodParams<T> {\n  jsonRpcSenders: JsonRpcSenders;\n  method: string;\n  params: any[];\n  callback?: Web3Callback<T>;\n  processResponse?(response: any): T;\n}\n\ninterface CallAlchemyRestEndpoint<T> {\n  restSender: RestPayloadSender;\n  path: string;\n  params: Record<string, any>;\n  callback?: Web3Callback<T>;\n  processResponse?(response: any): T;\n}\n\nfunction callAlchemyJsonRpcMethod<T>({\n  jsonRpcSenders,\n  method,\n  params,\n  callback = noop,\n  processResponse = identity,\n}: CallAlchemyJsonRpcMethodParams<T>): Promise<T> {\n  const promise = (async () => {\n    const result = await jsonRpcSenders.send(method, params);\n    return processResponse(result);\n  })();\n  callWhenDone(promise, callback);\n  return promise;\n}\n\nfunction callAlchemyRestEndpoint<T>({\n  restSender,\n  path,\n  params,\n  callback = noop,\n  processResponse = identity,\n}: CallAlchemyRestEndpoint<T>): Promise<T> {\n  const fixedParams = fixArrayQueryParams(params);\n  const promise = (async () => {\n    const result = await restSender.sendRestPayload(path, fixedParams);\n    return processResponse(result);\n  })();\n  callWhenDone(promise, callback);\n  return promise;\n}\n\nfunction processTokenBalanceResponse(\n  rawResponse: TokenBalancesResponse,\n): TokenBalancesResponse {\n  // Convert token balance fields from hex-string to decimal-string.\n  const fixedTokenBalances = rawResponse.tokenBalances.map((balance) =>\n    balance.tokenBalance != null\n      ? {\n          ...balance,\n          tokenBalance: ABIDecoder.decodeParameter(\n            \"uint256\",\n            balance.tokenBalance,\n          ),\n        }\n      : balance,\n  );\n  return { ...rawResponse, tokenBalances: fixedTokenBalances };\n}\n\n/**\n * Updates Web3's internal subscription architecture to also handle Alchemy\n * specific subscriptions. This is to handle alternate namings of the existing\n * subscription endpoints, but the officially documented interfaces are\n * specified in the AlchemyEth interface.\n */\nfunction patchSubscriptions(web3: Web3): void {\n  const { eth } = web3;\n  const oldSubscribe = eth.subscribe.bind(eth);\n  eth.subscribe = ((type: string, ...rest: any[]) => {\n    if (\n      type === \"alchemy_fullPendingTransactions\" ||\n      type === \"alchemy_newFullPendingTransactions\"\n    ) {\n      console.warn(\n        \"This method is now deprecated. Please use `alchemy_pendingTransactions` instead.\",\n      );\n      return suppressNoSubscriptionExistsWarning(() =>\n        oldSubscribe(\"alchemy_newFullPendingTransactions\" as any, ...rest),\n      );\n    }\n    if (\n      type === \"alchemy_filteredNewFullPendingTransactions\" ||\n      type === \"alchemy_filteredPendingTransactions\" ||\n      type === \"alchemy_filteredFullPendingTransactions\"\n    ) {\n      console.warn(\n        \"This method is now deprecated. Please use `alchemy_pendingTransactions` instead.\",\n      );\n      return suppressNoSubscriptionExistsWarning(() =>\n        oldSubscribe(\n          \"alchemy_filteredNewFullPendingTransactions\" as any,\n          ...rest,\n        ),\n      );\n    }\n\n    if (type === \"alchemy_pendingTransactions\") {\n      return suppressNoSubscriptionExistsWarning(() =>\n        oldSubscribe(\"alchemy_pendingTransactions\" as any, ...rest),\n      );\n    }\n    return oldSubscribe(type as any, ...rest);\n  }) as any;\n}\n\n/**\n * VERY hacky wrapper to suppress a spurious warning when subscribing to an\n * Alchemy subscription that isn't built into Web3.\n */\nfunction suppressNoSubscriptionExistsWarning<T>(f: () => T): T {\n  const oldConsoleWarn = console.warn;\n  console.warn = (...args: unknown[]) => {\n    if (\n      typeof args[0] === \"string\" &&\n      args[0].includes(\" doesn't exist. Subscribing anyway.\")\n    ) {\n      return;\n    }\n    return oldConsoleWarn.apply(console, args);\n  };\n  try {\n    return f();\n  } finally {\n    console.warn = oldConsoleWarn;\n  }\n}\n\n/**\n * Another VERY hacky monkeypatch to make sure that we can take extra parameters to certain alchemy subscriptions\n * I hate doing this, but the other option is to fork web3-core and I think for now this is better\n */\nconst { subscription } = web3CoreSubscriptions as any;\nconst oldSubscriptionPrototypeValidateArgs =\n  subscription.prototype._validateArgs;\nsubscription.prototype._validateArgs = function (args: any) {\n  if (\n    [\n      \"alchemy_filteredNewFullPendingTransactions\",\n      \"alchemy_filteredPendingTransactions\",\n      \"alchemy_filteredFullPendingTransactions\",\n      \"alchemy_pendingTransactions\",\n    ].includes(this.subscriptionMethod)\n  ) {\n    // This particular subscription type is allowed to have additional parameters\n  } else {\n    if (\n      [\n        \"alchemy_fullPendingTransactions\",\n        \"alchemy_newFullPendingTransactions\",\n      ].includes(this.subscriptionMethod)\n    ) {\n      if (this.options.subscription) {\n        this.options.subscription.subscriptionName = this.subscriptionMethod;\n      }\n    }\n\n    const validator = oldSubscriptionPrototypeValidateArgs.bind(this);\n    validator(args);\n  }\n};\n\nfunction noop(): void {\n  // Nothing.\n}\n\nfunction identity<T>(x: T): T {\n  return x;\n}\n\n/**\n * Alchemy's APIs receive multivalued params via keys with `[]` at the end.\n * Update any query params whose values are arrays to match this convention.\n */\nfunction fixArrayQueryParams(params: Record<string, any>): Record<string, any> {\n  const result: Record<string, any> = {};\n  Object.keys(params).forEach((key) => {\n    const value = params[key];\n    const fixedKey = Array.isArray(value) ? toArrayKey(key) : key;\n    result[fixedKey] = value;\n  });\n  return result;\n}\n\nfunction toArrayKey(key: string): string {\n  return endsWith(key, \"[]\") ? key : `${key}[]`;\n}\n\n/**\n * Like `String#endsWith`, for older environments.\n */\nfunction endsWith(s: string, ending: string): boolean {\n  const index = s.lastIndexOf(ending);\n  return index >= 0 && index === s.length - ending.length;\n}\n"]}