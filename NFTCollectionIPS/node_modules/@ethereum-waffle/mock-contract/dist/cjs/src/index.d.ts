import { BaseContract, Contract, Signer, utils } from 'ethers';
import type { JsonFragment } from '@ethersproject/abi';
declare type ABI = string | Array<utils.Fragment | JsonFragment | string>;
interface StubInterface {
    returns(...args: any): StubInterface;
    reverts(): StubInterface;
    revertsWithReason(reason: string): StubInterface;
    withArgs(...args: any[]): StubInterface;
}
export interface MockContract<T extends BaseContract = BaseContract> extends Contract {
    mock: {
        [key in ((keyof T['functions'] | 'receive'))]: StubInterface;
    };
    call(contract: Contract, functionName: string, ...params: any[]): Promise<any>;
    staticcall(contract: Contract, functionName: string, ...params: any[]): Promise<any>;
}
declare type DeployOptions = {
    address: string;
    override?: boolean;
};
export declare function deployMockContract<T extends BaseContract = BaseContract>(signer: Signer, abi: ABI, options?: DeployOptions): Promise<MockContract<T>>;
export {};
//# sourceMappingURL=index.d.ts.map